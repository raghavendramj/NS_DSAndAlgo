Discuss about in general,


computational complexity
	 time and space complexity



In mathematics, the logarithm is the inverse function to exponentiation.

exponentiation
	 10^3 => 10 * 10 * 10 => 1000
logarithm
	 log 1000 to the base 10  => 3

	1000 => x
	10 => base
	log(x) to the base b
The logarithm of x to base b is denoted as
	logbâ€‰(x),
	log10â€‰(1000) => 3

		2^6 => 64
		log2 (64) => 6
		logb(xy) = logbx + logb


	Arithmetic Progression:-
		1, 3, 5, 7, 9, 11, ........
		1, 5, 10, 15, 20, 25, .....
		a, a+d, a+2d, a+3d....
		An = a1 + (n-1)d

	Geometric Progression :
		2, 4, 8, 16, 32, 64, ....
		3, 6, 12, 24, 48, 96, ....
		100, 50, 25, 12.5, 6.25, 3.125, ...

	sortNumbers(arr, n)
		for i-> 0 to n
			for j-> i to n
				if(arr[i] > arr[j])
					swap arr[i] and arr[j]

	primenumber(n)
		preassume 1 & 2 is prime
		for i -> n/2
		if (n&i == 0)
		return false
		else return true

	isPrimeNumber n
		if n==0 or n == 1
			return true
		else
			for i -> 2  to n/2
				n % i == 0
					return false
		return true;


